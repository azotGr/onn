import java.util.ArrayList;
import java.util.List;

class Article {

    final String getArticle;

    Article(final String getArticle) {
        this.getArticle = getArticle;
    }
}

interface Subscriber{
    void send(Article article);
}

class OfflineSubscriber implements Subscriber {

    private final String address;

    public OfflineSubscriber(final String address) {
        this.address = address;
    }
    
    @Override
    public void send(Article article){
        System.out.println(article.getArticle + " была доставлена по адресу: " + address);
    }

    // метод send интерфейса Subscriber должен выводить текст "{article.getArticle} была доставлена по адресу: {address}"
}

class WebSite implements Subscriber {

    private final String url;

    public WebSite(final String url) {
        this.url = url;
    }
    
    @Override
    public void send(Article article){
        System.out.println(article.getArticle + " опубликована на страничке: " + url);
    }

    // метод send интерфейса Subscriber должен выводить текст "{article.getArticle} опубликована на страничке: {address}"
}

class NewspaperPublisher {

    private final List<Article> articles;
    
    List<Subscriber> subscribers = new ArrayList<Subscriber>();

    public NewspaperPublisher(final List<Article> articles) {
        this.articles = articles;
    }
    
    public void subscribe(Subscriber obj){
        if(obj instanceof Subscriber){
            if(!subscribers.contains(obj)){
                subscribers.add(obj);
            }
        }
    }
    
    public void unsubscribe(Subscriber obj){
        if(obj instanceof Subscriber){
            subscribers.remove(obj);
        }
    }
    
    public void startWork(){
        for (Subscriber subscriber : subscribers){
            for (Article article : articles){
                subscriber.send(article);   
           }
        }  
    }
    
    public void publishNewArticle(final Article article){
        articles.add(article);
        for (Subscriber subscriber : subscribers){
            subscriber.send(article);   
       }
    }
    
    
        // Создайте метод startWork().
            // Метод должен отправлять все статьи, которые хранятся в данный момент в списке articles, всем подписчикам из списка.
            // Для отправки используйте метод send() класса Subscriber.

        // Создайте метод publishNewArticle(). Метод принимает на вход объект класса Article.
            // Метод должен добавлять новую статью в список статей articles, а затем рассылать её всем подписчикам из списка.
}
